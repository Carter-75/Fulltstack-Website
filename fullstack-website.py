"""
Bootstrap this project structure and files, then delete this script.

Assumptions:
- Run from the repository root; this script creates/overwrites files in-place.
"""

from __future__ import annotations

import os
from typing import Dict


def ensure_parent_directory(file_path: str) -> None:
    parent_dir = os.path.dirname(file_path)
    if parent_dir:
        os.makedirs(parent_dir, exist_ok=True)


def write_file(path: str, content: str) -> None:
    ensure_parent_directory(path)
    with open(path, "w", encoding="utf-8", newline="\n") as f:
        f.write(content)


def main() -> None:
    files: Dict[str, str] = {
        # Backend
        "backend/app/__init__.py": """import os\nfrom flask import Flask, jsonify\nfrom flask_cors import CORS\nfrom dotenv import load_dotenv\n\n\ndef create_app() -> Flask:\n    \"\"\"Application factory creating the Flask app with minimal setup.\"\"\"\n    load_dotenv()\n\n    app = Flask(__name__)\n    app.config[\"JSON_SORT_KEYS\"] = False\n\n    # Restrict CORS in production; allow all in local dev\n    frontend_origin = os.getenv(\"FRONTEND_ORIGIN\", \"*\")\n    CORS(app, resources={r\"/*\": {\"origins\": frontend_origin}})\n\n    # Register API blueprint\n    from .routes import api_bp\n    app.register_blueprint(api_bp, url_prefix=\"/api\")\n\n    @app.get(\"/\")\n    def root():\n        return jsonify({\"status\": \"ok\"})\n\n    return app\n""",
        "backend/app/routes.py": """from flask import Blueprint, jsonify\nfrom .db import ping_database\nimport logging\n\napi_bp = Blueprint(\"api\", __name__)\n\n# Configure a logger for error reporting\nlogger = logging.getLogger(__name__)\n\n@api_bp.get(\"/health\")\ndef api_health():\n    \"\"\"Lightweight health endpoint for API layer monitoring.\"\"\"\n    return jsonify({\"status\": \"ok\", \"service\": \"api\"})\n\n@api_bp.get(\"/db/ping\")\ndef db_ping():\n    \"\"\"Verifies DB connectivity/credentials with a trivial SELECT.\"\"\"\n    ok, error = ping_database()\n    if not ok and error:\n        # Log the detailed error internally, avoid exposing sensitive info to client\n        logger.error(\"DB ping failed: %s\", error)\n    return jsonify({\n        \"status\": \"ok\" if ok else \"error\",\n        \"error\": None if ok else \"Database connection failed\",\n    })\n\n# Example insert route (commented):\n# from flask import request\n# from .db import insert_name\n#\n# @api_bp.post(\"/names\")\n# def create_name():\n#     \"\"\"Minimal insert endpoint; expects JSON body { \"name\": \"...\", \"email\": \"...\" }.\"\"\"\n#     data = request.get_json(silent=True) or {}\n#     name = (data.get(\"name\") or \"\").strip()\n#     email = (data.get(\"email\") or \"\").strip()\n#     if not name or not email:\n#         return jsonify({\"status\": \"error\", \"error\": \"name and email are required\"}), 400\n#\n#     ok, error = insert_name(name)\n#     if not ok:\n#         return jsonify({\"status\": \"error\", \"error\": error}), 500\n#     return jsonify({\"status\": \"ok\"})\n""",
        "backend/app/db.py": """import os\nfrom typing import Tuple, Optional\n\n\nimport mysql.connector\nfrom mysql.connector import Error\n\n\ndef _get_db_config() -> dict:\n    \"\"\"Load DB configuration from environment variables.\n\n    Using env vars (with python-dotenv during local dev) keeps secrets out of\n    source control and allows configuration per environment.\n    \"\"\"\n    return {\n        \"host\": os.getenv(\"DB_HOST\", \"localhost\"),\n        \"port\": int(os.getenv(\"DB_PORT\", \"3306\")),\n        \"user\": os.getenv(\"DB_USER\", \"root\"),\n        \"password\": os.getenv(\"DB_PASSWORD\", \"\"),\n        \"database\": os.getenv(\"DB_NAME\", \"mysql\"),\n    }\n\n\ndef get_connection() -> mysql.connector.connection.MySQLConnection:\n    \"\"\"Create and return a new MySQL connection using the above config.\"\"\"\n    cfg = _get_db_config()\n    return mysql.connector.connect(\n        host=cfg[\"host\"],\n        port=cfg[\"port\"],\n        user=cfg[\"user\"],\n        password=cfg[\"password\"],\n        database=cfg[\"database\"],\n        connection_timeout=3,\n    )\n\n\ndef ping_database() -> Tuple[bool, Optional[str]]:\n    \"\"\"Execute a trivial query to confirm connectivity and credentials.\n\n    Returns (ok, error_message_if_any).\n    \"\"\"\n    try:\n        conn = get_connection()\n    except Error as exc:\n        return False, str(exc)\n    except Exception as exc:\n        return False, str(exc)\n\n    try:\n        cur = conn.cursor()\n        cur.execute(\"SELECT 1\")\n        cur.fetchone()\n        cur.close()\n        return True, None\n    except Error as exc:\n        return False, str(exc)\n    except Exception as exc:\n        return False, str(exc)\n    finally:\n        try:\n            conn.close()\n        except Exception:\n            pass\n\n# Example helpers (commented):\n# def ensure_table_exists() -> None:\n#     \"\"\"Create the `names` table if it does not already exist.\n#     Example includes an email column to store a second field.\n#     \"\"\"\n#     conn = get_connection()\n#     try:\n#         cur = conn.cursor()\n#         cur.execute(\n#             \"\"\"\n#             CREATE TABLE IF NOT EXISTS names (\n#                 id INT PRIMARY KEY AUTO_INCREMENT,\n#                 name VARCHAR(255) NOT NULL,\n#                 email VARCHAR(255) NOT NULL,\n#                 created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n#             )\n#             \"\"\"\n#         )\n#         conn.commit()\n#         cur.close()\n#     finally:\n#         conn.close()\n#\n# def insert_name(name: str, email: str) -> Tuple[bool, Optional[str]]:\n#     \"\"\"Insert a single row into `names` after ensuring the table exists.\n#     This example writes both name and email.\n#     \"\"\"\n#     try:\n#         ensure_table_exists()\n#         conn = get_connection()\n#         cur = conn.cursor()\n#         cur.execute(\"INSERT INTO names (name, email) VALUES (%s, %s)\", (name, email))\n#         conn.commit()\n#         cur.close()\n#         conn.close()\n#         return True, None\n#     except Error as exc:\n#         return False, str(exc)\n#     except Exception as exc:\n#         return False, str(exc)\n\n\n\n""",
        "backend/run.py": """import os\n\nfrom app import create_app\n\n\napp = create_app()\n\n\nif __name__ == \"__main__\":\n    host = os.getenv(\"FLASK_RUN_HOST\", \"127.0.0.1\")\n    port = int(os.getenv(\"FLASK_RUN_PORT\", \"5000\"))\n    debug = os.getenv(\"FLASK_DEBUG\", \"1\") == \"1\"\n    app.run(host=host, port=port, debug=debug)\n\n\n""",
        "backend/requirements.txt": """Flask==3.0.3\nFlask-Cors==4.0.0\npython-dotenv==1.0.1\nmysql-connector-python==9.0.0\nwaitress==3.0.2\n""",
        # Frontend
        "frontend/index.html": """<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Title</title>\n  <link rel=\"stylesheet\" href=\"assets/css/style.css\">\n\n</head>\n<body>\n    <div class=\"container\">\n      <h1>Header</h1>\n      <!--\n        Example form (commented):\n        <form id=\"example-form\">\n          <label for=\"example-name\">Name</label>\n          <input id=\"example-name\" name=\"name\" type=\"text\" placeholder=\"Your name\" required>\n\n          <label for=\"example-email\">Email</label>\n          <input id=\"example-email\" name=\"email\" type=\"email\" placeholder=\"you@example.com\" required>\n\n          <button type=\"submit\">Submit</button>\n        </form>\n        <div id=\"example-result\" aria-live=\"polite\"></div>\n\n        This pairs with the commented JS in assets/js/script.js\n        and the example backend route in backend/app/routes.py.\n      -->\n      \n    \n    <script src=\"assets/js/script.js\" defer></script>\n\n\n    \n  \n</body>\n</html>\n\n""",
        "frontend/assets/css/style.css": """/* Minimal, device-friendly base styles */\n\n/* Box sizing reset */\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}\n\n/* Basic sensible defaults */\nhtml {\n  font-family: system-ui, -apple-system, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial;\n  font-size: 16px; /* base size; scales with browser settings */\n  -webkit-text-size-adjust: 100%;\n  line-height: 1.45;\n}\n\nbody {\n  margin: 0;\n  padding: 1rem;\n  background-color: #ffffff;\n  color: #111;\n  min-height: 100vh;\n  display: block;\n}\n\n/* Make images responsive if later added */\nimg,\npicture,\nvideo {\n  max-width: 100%;\n  height: auto;\n  display: block;\n}\n\n/* Utility container that stays readable on any device */\n.container {\n  max-width:  ninetych;\n  margin-left: auto;\n  margin-right: auto;\n  padding-left: 1rem;\n  padding-right: 1rem;\n}\n\n\n""",
        "frontend/assets/js/script.js": """(function () {\n    'use strict';\n  \n    // DOM ready\n    document.addEventListener('DOMContentLoaded', function () {\n      console.log('script.js loaded â€” DOM ready');\n\n      // Render a tiny status area showing backend health.\n      /*const healthEl = document.createElement('div');\n      healthEl.id = 'health-status';\n      healthEl.textContent = 'Checking backend health...';\n      document.body.appendChild(healthEl);\n\n      fetch('http://127.0.0.1:5000/health')\n        .then(function (r) { return r.json(); })\n        .then(function (data) {\n          healthEl.textContent = 'Backend: ' + data.status;\n        })\n        .catch(function (err) {\n          healthEl.textContent = 'Backend: unreachable';\n          console.error(err);\n        });*/\n\n      // Example submit handler (commented):\n      // const form = document.getElementById('example-form');\n      // const nameInput = document.getElementById('example-name');\n      // const emailInput = document.getElementById('example-email');\n      // const result = document.getElementById('example-result');\n      // if (form && nameInput && emailInput && result) {\n      //   form.addEventListener('submit', function (e) {\n      //     e.preventDefault();\n      //     const name = (nameInput.value || '').trim();\n      //     const email = (emailInput.value || '').trim();\n      //     if (!name || !email) {\n      //       result.textContent = 'Please enter a name and email.';\n      //       return;\n      //     }\n      //     result.textContent = 'Submitting...';\n      //     fetch('http://127.0.0.1:5000/api/names', {\n      //       method: 'POST',\n      //       headers: { 'Content-Type': 'application/json' },\n      //       body: JSON.stringify({ name, email })\n      //     })\n      //       .then(function (r) { return r.json(); })\n      //       .then(function (data) {\n      //         if (data.status === 'ok') {\n      //           result.textContent = 'Saved!';\n      //           nameInput.value = '';\n      //           emailInput.value = '';\n      //         } else {\n      //           result.textContent = 'Error: ' + (data.error || 'unknown');\n      //         }\n      //       })\n      //       .catch(function (err) {\n      //         console.error(err);\n      //         result.textContent = 'Network error';\n      //       });\n      //   });\n      // }\n    });\n  \n})();\n\n\n\n""",
        # Repo files
        ".gitignore": """# Python virtual environment\n.venv/\nvenv/\n\n# Byte-compiled / cache files\n__pycache__/\n*.py[cod]\n\n# Environment variables\n*.env\n""",
        # Project TODO
        "TODO.md": """## Project TODO\n\n**Environment**\n- [ ] Create `backend/.env` with:\n  - FLASK_RUN_HOST=`0.0.0.0`\n  - FLASK_RUN_PORT=`5000`\n  - FLASK_DEBUG=`0`\n  - FLASK_ENV=`production`\n  - DB_HOST=`<your-db-host>`\n  - DB_PORT=`3306`\n  - DB_USER=`<your-db-user>`\n  - DB_PASSWORD=`<your-db-password>`\n  - DB_NAME=`<your-database>`\n  - FRONTEND_ORIGIN=`<your-frontend-url>`  # e.g., `http://localhost:3000` for local dev\n\n- **Install & Run (backend)**\n  - [ ] `cd backend`\n  - [ ] Create venv: `python -m venv .venv`\n  - [ ] Activate venv: `.venv\\\\Scripts\\\\activate` (Windows)\n  - [ ] `pip install -r requirements.txt`\n  - [ ] `waitress-serve --listen=0.0.0.0:5000 run:app`\n\n- **Verify API**\n  - [ ] Root health: open `http://127.0.0.1:5000/` â†’ expect `{ \"status\": \"ok\" }`\n  - [ ] API Health: open `http://127.0.0.1:5000/api/health` â†’ expect `{ \"status\": \"ok\" }`\n  - [ ] DB Ping: open `http://127.0.0.1:5000/api/db/ping`\n    - Expect `{ \"status\": \"ok\" }` if credentials are valid\n    - Otherwise `{ \"status\": \"error\", \"error\": \"...\" }`\n\n- **Frontend**\n  - [ ] Open `frontend/index.html` in browser\n  - [ ] Confirm the page shows `Backend: ok`\n\n- **MySQL Checklist**\n  - [ ] Ensure MySQL server is running and accessible\n  - [ ] Confirm user/password and DB exist\n  - [ ] If needed, update `.env` with correct credentials\n\n- **Next (optional, later)**\n  - [ ] Add CRUD endpoints with MySQL queries\n  - [ ] Add simple UI form that calls new endpoints\n\n\n""",
    }

    for path, content in files.items():
        write_file(path, content)

    # Delete this script at the end
    try:
        os.remove(os.path.abspath(__file__))
    except Exception:
        # Non-fatal if deletion fails
        pass


if __name__ == "__main__":
    main()


